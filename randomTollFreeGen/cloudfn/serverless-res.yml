AWSTemplateFormatVersion: 2010-09-09
Description: "Creates lambda for calculating best random number and writing to database"
Parameters:
  Timeout:
    Type: String
    Default: "15"
  TableName:
    Type: String
    Default: rolodex
  ReadCapacityUnits:
    Type: Number
  WriteCapacityUnits:
    Type: Number
  HashKeyElementType:
    Type: String
  CodeBucketStackName:
    Type: String
    Default: "code-bucket-rolodex"
  ApiGatewayName:
    Type: String
    Default: RolodexApi
  ApiGatewayStageName:
    Type: String
    Default: dev
  ApiGatewayHTTPMethod:
    Type: String
    Default: GET
  GSINAME:
    Type: String
    Default: rolodex-time-index

Resources:
  RandomTollFreeGenLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "randomTollFreeGen"
      Handler: "randomTollFreeGen.lambda_handler"
      Role: !GetAtt RandomTollFreeGenRole.Arn
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub "${CodeBucketStackName}-CodeBucketName"
        S3Key:
          Ref: "randomTollFreeGen.zip"
      Runtime: "python3.8"
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          REGION: !Ref "AWS::Region"
      Timeout: !Ref Timeout
      MemorySize: "128"

  RandomTollFreeGenRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RandomTollFreeGenRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RandomTollFreeGenPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RolodexServerLambdaName}:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RandomTollFreeGenLambdaName}:*

                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/rolodex"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/rolodex/index/rolodex-time-index"

  RolodexServerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RolodexServerLambda}
      RetentionInDays: 90

  RandomTollFreeGenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RandomTollFreeGenLambda}
      RetentionInDays: 90

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RolodexServerLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${ApiGatewayStageName}/${ApiGatewayHTTPMethod}/${RolodexServerLambda}

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt RolodexServerLambda.Arn

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Gateway to retrieve latest rolodex numbers
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref ApiGatewayName

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: !Ref RolodexServerLambda
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RolodexServerLambda.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  RolodexServerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "rolodexServer"
      Handler: "rolodexServer.lambda_handler"
      Role: !GetAtt RandomTollFreeGenRole.Arn
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub "${CodeBucketStackName}-CodeBucketName"
        S3Key: "rolodexServer.zip"
      Runtime: "python3.8"
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          REGION: !Ref "AWS::Region"
          GSI_NAME: !Ref GSINAME
      Timeout: !Ref Timeout
      MemorySize: "128"

  RolodexDynamo:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "uuid"
          AttributeType: "S"
        - AttributeName: "partition"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "uuid"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref "ReadCapacityUnits"
        WriteCapacityUnits: !Ref "WriteCapacityUnits"
      GlobalSecondaryIndexes:
      - IndexName: rolodex-time-index
        KeySchema:
        - AttributeName: "partition"
          KeyType: HASH
        - AttributeName: "timestamp"
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: !Ref "ReadCapacityUnits"
          WriteCapacityUnits: !Ref "WriteCapacityUnits"


Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}
  LambdaArn:
    Value: !GetAtt RolodexServerLambda.Arn
  RolodexServerLambda:
    Value: !Ref RolodexServerLambda
  RandomTollFreeGenLambda:
    Value: !Ref RandomTollFreeGenLambda